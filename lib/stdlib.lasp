(begin
  ; Aliases
  (def first head)
  (def rest tail)

  ; Increment a number by one
  (def inc (fn (x) (+ x 1)))

  ; If a list is empty
  (def empty?
    (fn (coll)
      (= (head coll) nil)))

  ; Modulus
  (def mod
    (fn (x y) (- x (* (/ x y) y))))

  ; Returns a function that does the opposite of the given function
  (def complement
    (fn (f) (fn (x) (not (f x)))))

  ; If a number is even
  (def even?
    (fn (x) (= (mod x 2) 0)))

  ; If a number is odd
  (def odd? (complement even?))

  ; Length of a list
  (def len
    (fn (coll)
      (if (empty? coll)
        0
        (inc (len (tail coll))))))

  ; Gets an item in a list by index
  (def nth
    (fn (index coll)
      (if (= 0 index)
        (head coll)
        (nth (- index 1) (tail coll)))))

  ; Reverses a list
  (def reverse
    (fn (coll)
      (reduce (fn (acc item) (cons item acc)) (list) coll)))

  ; Apply f to all items in list
  (def map
    (fn (f coll)
      (if (= nil (head coll))
        coll
        (cons
          (f (head coll))
          (map f (tail coll))))))

  ; Sum over list with an accumulator
  (def reduce
    (fn (f acc coll)
      (if (empty? coll)
        acc
        (reduce f (f acc (head coll)) (tail coll)))))

  ; Filter a list of items based on a function
  (def filter
    (fn (f coll)
      (reduce
        (fn (acc item) (if (f item) (cons item acc) acc))
        (list)
        (reverse coll))))

  ; Sum of all items in a list
  (def sum
    (fn (coll)
      (reduce + 0 coll)))
)
